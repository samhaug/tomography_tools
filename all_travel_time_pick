#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : travel_time_compute.py
Purpose : Measure and record traveltime delays for all phases
Creation Date : 12-09-2017
Last Modified : Wed 27 Sep 2017 04:18:24 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

from numpy import round,argmax,max,abs,linspace,roll,pi,hstack,transpose,savetxt,mean,nan_to_num,zeros,where,sqrt,sum,array
from scipy.signal import argrelmax as arm
from numpy.fft import fft,fftfreq
from os import listdir,getcwd
from matplotlib import pyplot as plt
import matplotlib.gridspec as gridspec
import obspy
from scipy.signal import correlate,butter,freqs
import argparse
from obspy.taup import TauPyModel
import time
import h5py
from matplotlib.widgets import RadioButtons
model = TauPyModel(model='iasp91')

def main():
    parser = argparse.ArgumentParser(
                       description='Measure and record traveltime delays')
    parser.add_argument('-p','--phase',metavar='N',type=str,
                        help='Name of phase')
    parser.add_argument('-w','--window',default=0,type=int,
                        help='Half of the window length')
    parser.add_argument('--fmin',default=1./100,type=float,
                        help='Minimum frequency')
    parser.add_argument('--fmax',default=1./5,type=float,
                        help='Maximum frequency')
    parser.add_argument('-d','--data',type=str,
                        help='Path to data pickle')
    parser.add_argument('-s','--synth',type=str,
                        help='Path to synthetic pickle')
    parser.add_argument('--plot',dest='plot',
                        action='store_true',help='Plot waveforms')
    parser.add_argument('-e','--stride',type=int,
                        default=1,help='stride of stream')
    parser.add_argument('--problem',type=str,
                        default=False,help='file of problem names')

    h5f_name = getcwd().split('/')[-1]+'.picks.h5'
    h5f = h5py.File(h5f_name,'a',driver='core')
    args = parser.parse_args()
    std_in,sts_in = read_streams(args.data,args.synth)
    print len(std_in[::args.stride])
    print len(sts_in[::args.stride])
    std_in,sts_in = even_traces(std_in,sts_in)

    if std_in[0].stats.channel.endswith('T'):
        phase_list = ['S','S','S','S',
                      'SS','SSS',
                      'ScS','ScSScS','ScSScSScS',
                      'Sdiff','tts']
        fmax_list = [1./5,1./10,1./20,1./40,
                     1./20,1./30,
                     1./10,1./15,1./15,
                     1./20,1./20]
        group_name = [phase_list[idx]+str(int(1./fmax_list[idx])) for idx in
                      range(len(phase_list))]

        if std_in[0].stats.evdp > 300:
            phase_list.append('sS')
            fmax_list.append(1./15)
        fmin_list = [1./110]*len(phase_list)
        w_list = [3.0/i for i in fmax_list]

    elif std_in[0].stats.channel.endswith('R'):
        phase_list = ['SKS','SKKS']
        fmax_list = [1./15,1./15]
        group_name = [phase_list[idx]+str(int(1./fmax_list[idx])) for idx in
                      range(len(phase_list))]
        fmin_list = [1./110]*len(phase_list)
        w_list = [3.0/i for i in fmax_list]

    elif std_in[0].stats.channel.endswith('Z'):
        phase_list = ['P','P','P','P',
                      'PP','PPP',
                      'Pdiff',]
        fmax_list = [1./5,1./10,1./20,1./40,
                     1./20,1./25,
                     1./20]
        group_name = [phase_list[idx]+str(int(1./fmax_list[idx])) for idx in
                      range(len(phase_list))]
        fmin_list = [1./110]*len(phase_list)
        w_list = [3.0/i for i in fmax_list]

    for jdx in range(len(phase_list)):
        print 'Working on phase: '+phase_list[jdx]
        #make h5f group
        print group_name[jdx]
        h5f.create_group(group_name[jdx])
        std = std_in.copy()
        sts = sts_in.copy()
        args.window = w_list[jdx]
        args.phase = phase_list[jdx]
        args.fmin = fmin_list[jdx]
        args.fmax = fmax_list[jdx]
        #fname = write_header(args.phase,args)
        branch_list = phase_info(args.phase)
        #write_branch(fname,branch_list)
        freq_resp = write_f_resp(args.fmin,args.fmax)
        #write_freqency to h5file
        h5f[group_name[jdx]].create_dataset('freq_resp',data=freq_resp)
        welcome_message(args,std)
        std,sts = phase_range(std,sts,args.phase)
        std.filter('bandpass',freqmin=args.fmin,freqmax=args.fmax,
                   zerophase=True)
        sts.filter('bandpass',freqmin=args.fmin,freqmax=args.fmax,
                   zerophase=True)
        now = time.time()
        st_id = range(0,len(std))
        i = 0
        phase_info_list = []
        meta_data_list = ['trace_#',
                          'name',
                          'evla',
                          'evlo',
                          'stla',
                          'stlo',
                          'gcarc',
                          'az',
                          'evdp',
                          'mag',
                          'tobs','del_t','update_t',
                          'm1','m2',
                          'update_m1','update_m2',
                          'corcoeft_1','corcoeft_2',
                          's_amp','d_amp',
                          'SNR_0','SNR_1',
                          'lsq_0','lsq_1',
                          'amp_rat',
                          'left_rat','right_rat','terr'
                          ]
        #write metadata_list to h5file
        h5f[group_name[jdx]].create_dataset('meta',
                             data=array(meta_data_list))
        problem = []
        if args.problem != False:
            pf = open(args.problem,'r').read().strip().split('\n')
        for idx,ii in enumerate(st_id[::args.stride]):
            if args.problem != False:
                if std[idx].stats.network+'_'+std[idx].stats.station+'_'+\
                    std[idx].stats.location not in pf:
                    continue
            total = len(st_id)
            print ii,'{}%'.format(round(float(idx)/total*100.))
            if std[ii].stats.name != sts[ii].stats.name:
                print 'trace names misaligned'
            a = find_ttime(std[ii],sts[ii],[args.phase],
                           (-1*args.window,args.window),args.plot,args)
            if a == False:
                continue
            elif a != False:
                key=a[0]
                tobs=a[1]
                corcoeft=a[2]
                m1=a[3]
                m2=a[4]
                update_m1=a[5]
                update_m2=a[6]
                s_amp=a[7]
                d_amp=a[8]
                lsq=a[9]
                del_t=a[10]
                update_t=a[11]
                SNR=a[12]
                amp_rat=a[13]
                left_rat=a[14]
                right_rat=a[15]
                terr=a[16]

            if nan_to_num(amp_rat) < 0.1 or nan_to_num(amp_rat) > 10:
                print('amplitudes off x10')
                continue
            elif nan_to_num(SNR[0]) < 2.0 or nan_to_num(SNR[0]) > 15000:
                print('SNR < 2 or error')
                continue
            elif corcoeft[0] > corcoeft[1]:
                print('corcoeft lowered')
                continue
            elif lsq[0] > lsq[1]:
                print('lsq lowered')
                continue
            elif nan_to_num(max(corcoeft)) < 0.60:
                print('corcoeft < 0.5')
                continue
            elif nan_to_num(max(lsq)) < 0.60:
                print('lsq < 0.5')
                continue
            elif key == 'escape':
                h5f.close()
                break
            elif key == 'alt':
                continue
            elif key == 'control':
                info_list = [ii,
                             std[idx].stats.network+'_'+\
                               std[idx].stats.station+'_'+\
                               std[idx].stats.location,
                             std[idx].stats.evla,
                             std[idx].stats.evlo,
                             std[idx].stats.stla,
                             std[idx].stats.stlo,
                             std[idx].stats.gcarc,
                             std[idx].stats.az,
                             std[idx].stats.evdp,
                             std[idx].stats.mag,
                             tobs,del_t,update_t,
                             m1,m2,update_m1,update_m2,
                             corcoeft[0],
                             corcoeft[1],
                             s_amp,d_amp,
                             SNR[0],SNR[1],
                             lsq[0],lsq[1],
                             amp_rat,
                             left_rat,right_rat,terr
                             ]
                phase_info_list.append([str(kk) for kk in info_list])

                i += 1
            else:
                print('control to keep')
                print('alt to discard')
                print('esc to leave')

        h5f[group_name[jdx]].create_dataset('pick_info',
                             data=array(phase_info_list))
        then = time.time()
        rate = (len(std))/(then-now)
        print 'Total time: {} sec\n'.format(then-now)
        print 'Your rate: {} traces/sec\n'.format(rate)
        print '{} Proposed picks\n'.format(idx)
        print '{} Accepted picks\n'.format(i)
    h5f.close()

def even_traces(st,sts):
    dl = []
    sl = []
    for tr in st:
        tr.stats.name = tr.stats.station+tr.stats.network+tr.stats.location
        dl.append(tr.stats.name)
    for tr in sts:
        tr.stats.name = tr.stats.station+tr.stats.network+tr.stats.location
        sl.append(tr.stats.name)
    i = set(sl).intersection(set(dl))
    for tr in sts:
        if tr.stats.name not in i:
            sts.remove(tr)
    for tr in st:
        if tr.stats.name not in i:
            st.remove(tr)
    sts.sort(['name'])
    st.sort(['name'])
    return st,sts

def display_id(args):
    f = open(args.fname,'r').readlines()
    st_id = []
    for ii in f:
        if len(ii.strip().split()) < 5:
            continue
        else:
            st_id.append(int(ii.strip().split()[0]))
    return st_id

def welcome_message(args,st):
    print('#######################################')
    print('Computing and recording traveltime delays')
    print('#######################################')
    print 'Data file: ',args.data
    print 'Synthetic file: ',args.synth
    print 'Number of traces: ',len(st)
    print 'Measuring delay of phase ',args.phase
    print 'Event depth: {}km'.format(str(st[0].stats.evdp))
    print 'Phase window is {} seconds long'.format(2*args.window)
    print 'Butterworth filter from {} Hz to {} Hz'.format(args.fmin,args.fmax)
    print 'Using every {} traces'.format(1)
    if args.plot:
        print('Plotting is on')
    if args.plot != True:
        print('Plotting is off')
    print('#######################################')

def npcorr(s,d,samp):
    correl = correlate(s,d,mode='same')
    ts = round((len(d)/2.-argmax(correl))/samp,2)
    return ts

def find_ttime(data_tr,synth_tr,phase,window_tuple,plot,args):
    samp = data_tr.stats.sampling_rate
    ssamp = synth_tr.stats.sampling_rate
    if samp != ssamp:
        print('sampling_rate_problem')
        return False
    d_o = data_tr.stats.o
    d_st = data_tr.stats.starttime
    d_et = data_tr.stats.endtime
    s_o = synth_tr.stats.o
    s_st = synth_tr.stats.starttime
    s_et = synth_tr.stats.endtime

    #Find arrival time of first arriving phase
    if phase[0] == 'SKS' or phase[0] == 'SKKS' or phase[0].startswith('P'):
        itime = model.get_travel_times(source_depth_in_km=data_tr.stats.evdp,
                                       distance_in_degree=data_tr.stats.gcarc,
                                       phase_list=['ttp'])[0].time

    elif phase[0].startswith('S') or phase[0] == 'sS':
        itime = model.get_travel_times(source_depth_in_km=data_tr.stats.evdp,
                                       distance_in_degree=data_tr.stats.gcarc,
                                       phase_list=['tts'])[0].time

    elif phase[0] == 'tts':
        itime = model.get_travel_times(source_depth_in_km=data_tr.stats.evdp,
                                       distance_in_degree=data_tr.stats.gcarc,
                                       phase_list=['tts'])[0].time
    #Find arrival time of phase in question
    time = model.get_travel_times(source_depth_in_km=data_tr.stats.evdp,
                                  distance_in_degree=data_tr.stats.gcarc,
                                  phase_list=phase)[0].time

    #Noise window
    n3 = data_tr.slice(d_st+itime+d_o-(4./args.fmin),
                       d_st+itime+d_o-(1.0/args.fmin)).data
    #Data window
    d = data_tr.slice(d_st+time+d_o+window_tuple[0],
                      d_st+time+d_o+window_tuple[1]).data

    #Make larger data window incase del_t is of the order of the window
    l_d = data_tr.slice(d_st+time+d_o+3*window_tuple[0],
                      d_st+time+d_o+3*window_tuple[1]).data
    #synth_window
    s = synth_tr.slice(s_st+time+s_o+window_tuple[0],
                       s_st+time+s_o+window_tuple[1]).data

    #Make sure data and synth are same length, within a second
    dx = min(len(d),len(s))
    if abs(len(d)-len(s)) > 10:
        print('data/sample mismatch')
        return False
    else:
        d = d[0:dx]
        s = s[0:dx]

    t = linspace(window_tuple[0],window_tuple[1],num=len(d))
    T = 1.3/args.fmax

    #Make sure trace is long enough to measure SNR
    try:
        SNR_1 = round(max(d)/max(n3),2)
        SNR_2 = round(max(d)/mean(sqrt(n3**2)),2)
        #make SNR tuple
        SNR = (SNR_1,SNR_2)
    except ValueError:
        print('SNR_problem')
        return False

    #First del_t correlation measurement
    del_t = npcorr(s,d,samp)
    mid_s = int(len(s)/2.)
    mid_d = int(len(d)/2.)
    mid_l_d = int(len(l_d)/2.)
    try:
        cs  = s[mid_s-int(samp*T):mid_s+int(samp*T)]
        #slice correlated aligned data from large d
        cd  = l_d[mid_l_d+int(samp*(del_t-T)):mid_l_d+int(samp*(del_t+T))]
        s_amp = (max(cs)-min(cs))
        d_amp = (max(cd)-min(cd))
        amp_rat = round(s_amp/d_amp,2)
    except ValueError:
        print('index_error')
        print del_t
        print mid_s,int(samp*T)
        print mid_l_d,int(samp*(del_t-T)),int(samp*(del_t+T))
        return False

    #Make sure correlated windows match
    cx = min(len(cs),len(cd))
    if abs(len(cd)-len(cs)) > 10:
        print('second data/sample mismatch')
        return False
    cs = cs[0:cx]
    cd = cd[0:cx]

    #roll original synthetic, plotted on left as dashed red
    sr = roll(s,int(samp*(del_t)))

    #Second correlation
    update_t = npcorr(cs,cd,samp)
    update_cs = roll(cs,int(samp*update_t))

    tcs = linspace(int(-T),int(T),num=len(cs))
    tcd = linspace(int(-T),int(T),num=len(cd))

    #m1 and m2 for first window
    m1 = round(max(correlate(d,s,mode='same'))/
               max(correlate(s,s,mode='same')),3)
    m2 = round(max(correlate(d,d,mode='same'))/
               max(correlate(d,s,mode='same')),3)

    #m1 and m2 for second, adjusted window
    update_m1 = round(max(correlate(cd,cs,mode='same'))/
                      max(correlate(cs,cs,mode='same')),3)
    update_m2 = round(max(correlate(cd,cd,mode='same'))/
                      max(correlate(cd,cs,mode='same')),3)

    #corfoect for first window
    corcoeft_1 = round(1-((m2-m1)/m2),3)
    #corfoect for second, adjusted window
    corcoeft_2 = round(1-((update_m2-update_m1)/update_m2),3)
    #join as tuple
    corcoeft = (corcoeft_1,corcoeft_2)

    #lsq for first window
    lsq_1 = 1-round(sum((sr/max(abs(sr))-d/max(abs(d)))**2)/
                  sum((d/max(abs(d)))**2),2)
    #lsq for second, adjusted window
    lsq_2 = 1-round(sum((update_cs/max(abs(update_cs))-cd/max(abs(cd)))**2)/
                         sum((cd/max(abs(cd)))**2),2)
    #join as tuple
    lsq = (lsq_1,lsq_2)

    #observed time: predicted time plus first and updated time shift
    tobs = time+del_t+update_t

    #Find correlation shoulders
    ss = correlate(s,s,mode='same')
    sd = correlate(s,d,mode='same')
    ss_imax = argmax(ss)
    arm_max = where(arm(ss)[0] == ss_imax)[0]

    sd_imax = argmax(sd)
    arm_max = where(arm(sd)[0] == sd_imax)[0]
    try:
        right_rat = round(sd[arm(sd)[0][arm_max+1]][0]/max(sd),2)
        left_rat = round(sd[arm(sd)[0][arm_max-1]][0]/max(sd),2)
    except IndexError:
        right_rat = 0
        left_rat = 0

    if plot == True:
        if phase[0].startswith('S') or phase[0].startswith('sS') or \
           phase[0] == 'tts':
            ds_time = model.get_travel_times(source_depth_in_km=
                                       data_tr.stats.evdp,
                                       distance_in_degree=data_tr.stats.gcarc,
                              phase_list=['S','SS','SSS','SKS','SKKS',
                                         'sS','ScS','sScS','ScSScS','sScSScS'])
            dp_time = 0
        if phase[0].startswith('P'):
            dp_time = model.get_travel_times(source_depth_in_km=
                                             data_tr.stats.evdp,
                              distance_in_degree=data_tr.stats.gcarc,
                              phase_list=['p'+phase[0]])[0].time
            ds_time = model.get_travel_times(source_depth_in_km=
                                             data_tr.stats.evdp,
                              distance_in_degree=data_tr.stats.gcarc,
                              phase_list=['s'+phase[0]])
        class ClickSelect(object):
            def __init__(self):
                self.key = None
                fig = plt.gcf()
                fig.canvas.mpl_connect('key_press_event', self.on_key)
            def on_key(self,event):
                self.key = event.key
                plt.close()
                return True

        gs = gridspec.GridSpec(50, 115)
        rax = plt.subplot(gs[:,105::])

        def errfunc(label):
            t_err_dict = {'0.0 s':0, '0.25 s':0.25,
                         '0.5 s':0.5 ,'0.75 s':0.75,
                         '1.0 s':1.0 ,'1.25 s':1.25,
                         '1.5 s':1.5 ,'1.75 s':1.75,
                         '2.0 s':2.0 ,'3.0 s':3.0,
                         '4.0 s':4.0 ,'5.0 s':5.0}
            terr = t_err_dict[label]

        radio = RadioButtons(rax,('0.0 s','0.25 s',
                                  '0.5 s','0.75 s',
                                  '1.0 s','1.25 s',
                                  '1.5 s','1.75 s',
                                  '2.0 s','3.0 s',
                                  '4.0 s','5.0 s',
                                  ))
        #radio.on_clicked(errfunc)
        select = radio.value_selected

        ax_bot = plt.subplot(gs[26:38,0:100])
        ax_bot.yaxis.set_ticklabels([])

        ax_full = plt.subplot(gs[39:50,0:100])
        ax_full.yaxis.set_ticklabels([])

        ax_left = plt.subplot(gs[0:25,0:49])
        ax_left.yaxis.set_ticklabels([])
        ax_left.set_xlabel('Time (s)')

        ax_right = plt.subplot(gs[0:25,51:100])
        ax_right.yaxis.set_ticklabels([])
        ax_right.yaxis.set_ticklabels([])
        ax_right.set_xlabel('Time (s)')

        td_full = linspace(-1*d_o,d_et-d_st-d_o,
                           num=data_tr.stats.npts)
        ts_full = linspace(-1*s_o,s_et-s_st-s_o,
                           num=synth_tr.stats.npts)

        ax_full.plot(td_full,data_tr.data,color='k')
        ax_full.plot(ts_full,synth_tr.data,color='r')
        ax_full.set_xlim(0,int(synth_tr.stats.npts/
                         synth_tr.stats.sampling_rate))

        ax_full.axvspan(itime+d_o-(3./args.fmin),
                        itime+d_o-(0.5/args.fmin),color='b',alpha=0.3)

        ax_full.axvspan(time+synth_tr.stats.o+window_tuple[0],
                    time+synth_tr.stats.o+window_tuple[1],color='k',alpha=0.2)

        ax_right.plot(tcs,cs/max(abs(cs)),color='r')
        ax_right.plot(tcs,update_cs/max(abs(update_cs)),color='r',ls='--')
        ax_right.plot(tcd,cd/max(abs(cd)),color='k')
        ax_right.plot(tcs,roll(update_cs/max(abs(update_cs)),
                      int(samp*(1))),color='b',ls='--',alpha=0.3)
        ax_right.plot(tcs,roll(update_cs/max(abs(update_cs)),
                      int(samp*(-1))),color='g',ls='--',alpha=0.3)

        ax_left.plot(t,d,color='k')
        ax_left.plot(t,s,color='r')
        ax_left.plot(t,roll(s,int(samp*(del_t))),color='r',ls='--')
        ax_left.plot(t,roll(s,int(samp*(del_t+1))),color='b',ls='--',alpha=0.3)
        ax_left.plot(t,roll(s,int(samp*(del_t-1))),color='g',ls='--',alpha=0.3)

        ax_bot.axvline(time,color='k')
        ax_bot.axvspan(d_st+itime+d_o-(2./args.fmin),
                       d_st+itime+d_o-30,color='b',alpha=0.3)
        ax_bot.axvspan(time+synth_tr.stats.o+window_tuple[0],
                       time+synth_tr.stats.o+window_tuple[1],
                       color='k',alpha=0.2)
        ax_bot.plot(td_full,data_tr.data,color='k')
        ax_bot.plot(ts_full,synth_tr.data,color='r')
        ax_bot.set_xlim(time+synth_tr.stats.o-400,time+synth_tr.stats.o+400)
        ax_bot.set_ylim(data_tr.data.min()*1.4,data_tr.data.max()*1.4)

        for ii in ds_time:
            ax_bot.text(ii.time,0,ii.name)
        ax_bot.axvline(dp_time,color='k')

        ax_left.set_title('{} Lat:{} Lon:{} H:{}km Mw {}'.format(
                          str(synth_tr.stats.starttime),
                          str(round(data_tr.stats.evla)),
                          str(round(data_tr.stats.evlo)),
                          str(round(data_tr.stats.evdp)),
                          str(round(data_tr.stats.mag))))
        ax_right.set_title('Net: {} Stat: {} stla: {} stlo: {} Az: {} Gcarc: {}'.\
                           format(data_tr.stats.network,
                                  data_tr.stats.station,
                                  str(round(data_tr.stats.stla)),
                                  str(round(data_tr.stats.stlo)),
                                  str(round(data_tr.stats.az)),
                                  str(round(data_tr.stats.gcarc))))

        clicks = ClickSelect()
        fig = plt.gcf()
        if nan_to_num(min(SNR)) < 1.5 or nan_to_num(corcoeft[1]) < 0.75 \
           or nan_to_num(amp_rat) < 0.14:
            fig.set_facecolor('red')
        elif nan_to_num(max(SNR)) > 15000 or nan_to_num(corcoeft[1]) > \
             1.5 or nan_to_num(amp_rat) > 7:
            fig.set_facecolor('red')
        else:
            fig.set_facecolor('limegreen')

        plt.figtext(0.1,0.95,'press ctrl to save')
        plt.figtext(0.15,0.30,'M1: {}\nM2: {}\nS/D: {}\nSNR_max: {}\nSNR_mean: {}\nLSQ_1: {}\nLSQ_2: {}'
                    .format(m1,m2,amp_rat,SNR[0],SNR[1],lsq[0],lsq[1]),size=12)

        plt.figtext(0.37,0.55,'del_t: {}s\nupdate: {}s\nfinal_t: {}s\ncorr1:{}\ncorr2: {}'\
                    .format(del_t,update_t,del_t+update_t,corcoeft[0],corcoeft[1]),size=12)
        plt.figtext(0.54,0.51,'R_rat: {}\nL_rat: {}\n'\
                    .format(right_rat,left_rat),size=12)
        plt.show()
        key = clicks.key
        terr = float(radio.value_selected.split()[0])
    else:
        key = 'control'
        terr = 0

    return key,tobs,corcoeft,m1,m2,\
           update_m1,update_m2,\
           s_amp,d_amp,lsq,\
           del_t,update_t,\
           SNR,amp_rat,\
           left_rat,right_rat,terr

def read_streams(data_pickle,synth_pickle):
    sts = obspy.read(synth_pickle)
    std = obspy.read(data_pickle)
    sts.sort(['network'])
    std.sort(['network'])
    std.differentiate()
    sts.differentiate()
    sts.interpolate(10)
    std.interpolate(10)
    return std,sts

def write_traveltime(fname,tr,tsig,tobs,corcoeft,nbt,xcl,tincore):
    idate=str(tr.stats.starttime.year)[-2::]+'%03d'%tr.stats.starttime.day
    iotime='%02d%02d%02d'%(tr.stats.starttime.hour,
                           tr.stats.starttime.minute,
                           tr.stats.starttime.second)
    ievt='1'
    kluster='0'
    stationcode=tr.stats.station
    netw=tr.stats.network
    comp=tr.stats.channel
    slat=round(tr.stats.evla,2)
    slon=round(tr.stats.evlo,2)
    sdep=round(tr.stats.evdp,2)
    rlat=round(tr.stats.stla,2)
    rlon=round(tr.stats.stlo,2)
    relev=0.0
    nobst=1
    nobsa=0
    #number of polar crossings
    kpole=0
    line_2 = '1 0 00\n'
    line_3 = '1\n'
    line_5 = '0\n'
    with open(fname,'a') as f:
        f.write('{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}\n'.format(
                str(idate),
                str(iotime),
                str(ievt),
                str(kluster),
                stationcode,
                netw,
                comp,
                str(slat),
                str(slon),
                str(sdep),
                str(rlat),
                str(rlon),
                str(relev),
                str(nobst),
                str(nobsa),
                str(kpole),
                ))
        f.write(line_2)
        f.write(line_3)
        f.write('{} {} {} {} {} {}\n'.format(
                 str(tobs),
                 str(tsig),
                 str(corcoeft[1]),
                 str(int(nbt)),
                 str(2.*xcl),
                 str(int(tincore))))
        f.write(line_5)

def write_header(phase_name,args):
    fname = '{}_{}_{}.dat'.format(getcwd().split('/')[-1],
                                  phase_name,
                                  round(1./args.fmax))
    with open(fname,'w') as f:
        f.write(fname+'\n')
        f.write('None\n')
    return fname

def write_f_resp(fmin,fmax):
    fmin *= 2*pi
    fmax *= 2*pi
    b,a = butter(4,(fmin,fmax),'bandpass',analog=True)
    w,h = freqs(b, a)
    w = round(w,5)
    h = abs(w*round(h,5))
    freq_resp = hstack((transpose([w]),transpose([h])))
    #with open(fname,'a') as f:
    #    f.write('1\n')
    #    f.write('{}\n'.format(len(w)))
    #    savetxt(f,freq_resp,fmt='%1.7f')
    return freq_resp

def write_branch(fname,branch_list):
    with open(fname,'a') as f:
        for ii in branch_list:
            f.write(ii+'\n')

def phase_info(phase_name):
    if phase_name == 'sSdiff':
        branch_list = ['sSdiff','sSdiff','DONT USE','DONT USE','DONT USE']
    elif phase_name == 'Sdiff':
        branch_list = ['Sdiff','Sdiff','DONT USE','DONT USE','DONT USE']

    if phase_name == 'pPdiff':
        branch_list = ['pPdiff','sSdiff','DONT USE','DONT USE','DONT USE']
    elif phase_name == 'Pdiff':
        branch_list = ['Pdiff','Sdiff','DONT USE','DONT USE','DONT USE']

    elif phase_name == 'S':
        branch_list = ['S','S','6371 1 2','3482 2 2','6371 5 0']
    elif phase_name == 'sS':
        branch_list = ['sS','sS','6300 0 2','6371 1 2','3482 3 2','6371 5 0']

    elif phase_name == 'ScS':
        branch_list = ['ScS','ScS','6371 1 2','3482 3 2','6371 5 0']
    elif phase_name == 'ScSScS':
        branch_list = ['ScSScS','ScSScS','6371 1 2','3482 3 2','6371 3 2','3482 3 2','6371 5 0']
    elif phase_name == 'ScSScSScS':
        branch_list = ['ScSScSScS','ScSScSScS','6371 1 2','3482 3 2','6371 3 2','3482 3 2','6371 3 2','3482 3 2','6371 5 0']

    elif phase_name == 'SS':
        branch_list = ['SS','SS','6371 1 2','3482 2 2','6371 3 2','3482 2 2','6371 5 0']
    elif phase_name == 'SSS':
        branch_list = ['SSS','SSS','6371 1 2','3482 2 2','6371 3 2','3482 2 2','6371 3 2','3482 2 2','6371 5 0']

    elif phase_name == 'SKS':
        branch_list = ['SKS','SKS','6371 1 2','3482 4 1','1217 2 1','3482 4 2','6371 5 0']
    elif phase_name == 'SKKS':
        branch_list = ['SKS','SKS','6371 1 2','3482 4 1','3482 3 1','3482 4 2','6371 5 0']

    elif phase_name == 'P':
        branch_list = ['P','P','6371 1 1','3482 2 1','6371 5 0']
    elif phase_name == 'PP':
        branch_list = ['PP','PP','6371 1 1','3482 2 1','6371 3 1','3482 2 1','6371 5 0']
    elif phase_name == 'PPP':
        branch_list = ['PPP','PPP','6371 1 1','3482 2 1','6371 3 1','3482 2 1','6371 3 1','3482 2 1','6371 5 0']
    else:
        print('Phase name first argument')
    return branch_list

def phase_range(std,sts,phase_name):
    if phase_name == 'tts':

        for tr in std:
            if tr.stats.gcarc <= 95. or tr.stats.gcarc >= 105.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc <= 95. or tr.stats.gcarc >= 105.:
                std.remove(tr)

    if phase_name == 'S' or phase_name == 'sS':

        for tr in std:
            if tr.stats.gcarc > 95.:
                std.remove(tr)
            if tr.stats.gcarc < 27.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc > 95.:
                sts.remove(tr)
            if tr.stats.gcarc < 27.:
                sts.remove(tr)

    if phase_name == 'Sdiff' or phase_name == 'sSdiff':

        for tr in std:
            if tr.stats.gcarc > 150.:
                std.remove(tr)
            if tr.stats.gcarc < 105.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc > 150.:
                sts.remove(tr)
            if tr.stats.gcarc < 105.:
                sts.remove(tr)

    if phase_name == 'SS' or phase_name == 'sSS':

        for tr in std:
            if tr.stats.gcarc < 56.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc < 56.:
                sts.remove(tr)

    if phase_name == 'SSS' or phase_name == 'sSSS':

        for tr in std:
            if tr.stats.gcarc < 85.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc < 85.:
                sts.remove(tr)

    if phase_name == 'ScS' or phase_name == 'sScS':

        for tr in std:
            if tr.stats.evdp < 200:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 25:
                    continue
                elif tr.stats.gcarc > 52 and tr.stats.gcarc < 70:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 200 and tr.stats.evdp < 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 25:
                    continue
                elif tr.stats.gcarc > 52 and tr.stats.gcarc < 70:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 31:
                    continue
                elif tr.stats.gcarc > 52 and tr.stats.gcarc < 70:
                    continue
                else:
                    std.remove(tr)

        for tr in sts:
            if tr.stats.evdp < 200:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 25:
                    continue
                elif tr.stats.gcarc > 52 and tr.stats.gcarc < 70:
                    continue
                else:
                    sts.remove(tr)
            elif tr.stats.evdp > 200 and tr.stats.evdp < 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 25:
                    continue
                elif tr.stats.gcarc > 52 and tr.stats.gcarc < 70:
                    continue
                else:
                    sts.remove(tr)
            elif tr.stats.evdp > 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 31:
                    continue
                elif tr.stats.gcarc > 52 and tr.stats.gcarc < 70:
                    continue
                else:
                    sts.remove(tr)

    if phase_name == 'ScSScS' or phase_name == 'sScSScS':

        for tr in std:
            if tr.stats.evdp < 200:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 60:
                    continue
                elif tr.stats.gcarc > 96 and tr.stats.gcarc < 160:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 200 and tr.stats.evdp < 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 60:
                    continue
                elif tr.stats.gcarc > 96 and tr.stats.gcarc < 160:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 73:
                    continue
                elif tr.stats.gcarc > 96 and tr.stats.gcarc < 160:
                    continue
                else:
                    std.remove(tr)

        for tr in sts:
            if tr.stats.evdp < 200:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 60:
                    continue
                elif tr.stats.gcarc > 96 and tr.stats.gcarc < 160:
                    continue
                else:
                    sts.remove(tr)
            elif tr.stats.evdp > 200 and tr.stats.evdp < 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 60:
                    continue
                elif tr.stats.gcarc > 96 and tr.stats.gcarc < 160:
                    continue
                else:
                    sts.remove(tr)
            elif tr.stats.evdp > 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 73:
                    continue
                elif tr.stats.gcarc > 96 and tr.stats.gcarc < 160:
                    continue
                else:
                    sts.remove(tr)

    if phase_name == 'ScSScSScS' or phase_name == 'sScSScSScS':

        for tr in std:
            if tr.stats.evdp < 200:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 90:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 200 and tr.stats.evdp < 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 90:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 120:
                    continue
                else:
                    std.remove(tr)

        for tr in sts:
            if tr.stats.evdp < 200:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 90:
                    continue
                else:
                    sts.remove(tr)
            elif tr.stats.evdp > 200 and tr.stats.evdp < 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 90:
                    continue
                else:
                    sts.remove(tr)
            elif tr.stats.evdp > 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 120:
                    continue
                else:
                    sts.remove(tr)

    if phase_name == 'SKS':
        for tr in std:
            if tr.stats.gcarc > 85 and tr.stats.gcarc < 135:
                continue
            else:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc > 85 and tr.stats.gcarc < 135:
                continue
            else:
                sts.remove(tr)

    if phase_name == 'SKKS':
        for tr in std:
            if tr.stats.gcarc > 110 and tr.stats.gcarc < 140:
                continue
            else:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc > 110 and tr.stats.gcarc < 140:
                continue
            else:
                sts.remove(tr)

    if phase_name == 'P' or phase_name == 'pP':

        for tr in std:
            if tr.stats.gcarc > 98.:
                std.remove(tr)
            if tr.stats.gcarc < 27.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc > 98.:
                sts.remove(tr)
            if tr.stats.gcarc < 27.:
                sts.remove(tr)

    if phase_name == 'Pdiff' or phase_name == 'pPdiff':

        for tr in std:
            if tr.stats.gcarc < 100.:
                std.remove(tr)
            if tr.stats.gcarc > 150.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc < 100.:
                sts.remove(tr)
            if tr.stats.gcarc > 150.:
                sts.remove(tr)

    if phase_name == 'PP' or phase_name == 'pPP':

        for tr in std:
            if tr.stats.gcarc < 56.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc < 56.:
                sts.remove(tr)

    if phase_name == 'PPP' or phase_name == 'pPPP':

        for tr in std:
            if tr.stats.gcarc < 85.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc < 85.:
                sts.remove(tr)

    if phase_name == 'PKP' or phase_name == 'pPKP':

        for tr in std:
            if tr.stats.gcarc < 140.:
                std.remove(tr)
        for tr in sts:
            if tr.stats.gcarc < 140.:
                sts.remove(tr)

    return std,sts

def write_amp_header(phase_name,fmin,fmax):
    fname = '{}_{}_{}.dat'.format(getcwd().split('/')[-1],
                                  phase_name,
                                  round(1./fmax))
    with open(fname,'w') as f:
        f.write(fname+'\n')
        f.write('fmin,fmax''\n')
        f.write('{} {}\n'.format(fmin,fmax))
        f.write('idate,iotime,stat,netw,comp,slat,slon,sdep,rlat,rlon,relev,tobs,delt,corcoeft,m1,m2,s_amp,d_amp,SNR1,SNR2,amp_rat\n')
    return fname

def write_amplitude(fname,ii,tr,tobs,corcoeft,m1,m2,update_m1,update_m2,s_amp,d_amp,del_t,SNR,amp_rat,left_rat,right_rat,lsq):
    idate=str(tr.stats.starttime.year)[-2::]+'%03d'%tr.stats.starttime.day
    iotime='%02d%02d%02d'%(tr.stats.starttime.hour,
                           tr.stats.starttime.minute,
                           tr.stats.starttime.second)
    stationcode=tr.stats.station
    netw=tr.stats.network
    comp=tr.stats.channel
    slat=round(tr.stats.evla,2)
    slon=round(tr.stats.evlo,2)
    sdep=round(tr.stats.evdp,2)
    rlat=round(tr.stats.stla,2)
    rlon=round(tr.stats.stlo,2)
    gcarc = round(tr.stats.gcarc,2)
    relev=0.0
    #number of polar crossings
    line_2 = '1 0 00\n'
    line_3 = '1\n'
    line_5 = '0\n'
    with open(fname,'a') as f:
        f.write('{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}\n'.format(
                str(ii),
                str(idate),
                str(iotime),
                '%5s'%stationcode,
                '%3s'%netw,
                '%3s'%comp,
                '%1.2f'%slat,
                '%1.2f'%slon,
                '%1.1f'%sdep,
                '%1.1f'%rlat,
                '%1.1f'%rlon,
                '%1.2f'%relev,
                '%1.1f'%tobs,
                '%1.1f'%del_t,
                '%1.3f'%corcoeft[0],
                '%1.3f'%corcoeft[1],
                '%1.3f'%m1,
                '%1.3f'%m2,
                '%1.3f'%update_m1,
                '%1.3f'%update_m2,
                '%1.2e'%s_amp,
                '%1.2e'%d_amp,
                '%1.2f'%SNR[0],
                '%1.2f'%SNR[1],
                '%1.2f'%amp_rat,
                '%1.2f'%left_rat,
                '%1.2f'%right_rat,
                '%1.2f'%lsq,
                '%1.2f'%gcarc,
                ))

def monochrome(tt,yy):
    '''
    Find likliest frequency
    '''
    #tt = np.linspace(0,tr.stats.endtime-tr.stats.starttime,num=tr.stats.npts)
    #yy = tr.data
    ff = fftfreq(len(tt),(tt[1]-tt[0]))
    Fyy = abs(fft(yy))
    freq = abs(ff[argmax(Fyy[1:])+1])
    return freq

main()

