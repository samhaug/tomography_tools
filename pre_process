#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : pre_process.py
Purpose : Automated data cleaner for length and station intersection
Creation Date : 14-08-2017
Last Modified : Mon 14 Aug 2017 01:57:02 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from subprocess import call
import os
import obspy
from sys import argv

def main():
    os.mkdir('sh_processed')
    stn,ste = read_stream('processed/')
    ste = interpolate_filter(ste)
    stn = interpolate_filter(stn)
    stn,ste = station_list_filter(stn,ste)
    for idx,ii in enumerate(ste):
        name = ste[idx].stats.network+'.'+ste[idx].stats.station+'.'+ste[idx].stats.location
        ste[idx].stats.name = name
        name = stn[idx].stats.network+'.'+stn[idx].stats.station+'.'+stn[idx].stats.location
        stn[idx].stats.name = name
    ste.sort(['name'])
    stn.sort(['name'])
    for idx,ii in enumerate(ste):
        if ste[idx].stats.name != stn[idx].stats.name:
            print ste[idx].stats.name,stn[idx].stats.name

    r,t = obspy_rotate_ne_rt(stn,ste)
    #r.write('pre_processed_clean/R.sac',format='SAC')
    for tr in t:
        name = tr.stats.network+'.'+tr.stats.station+'.'+tr.stats.location+'.'+tr.stats.channel
        tr.write('sh_processed/'+name,format='SAC')
    #t.write('pre_processed_clean/T.sac',format='SAC')
    #stz.write('pre_processed_clean/Z.sac',format='SAC')

def obspy_rotate_ne_rt(stn,ste):
    str = stn.copy()
    stt = stn.copy()
    for idx,tr in enumerate(stn):
        if stn[idx].stats.station != ste[idx].stats.station:
            continue
        ba = ste[idx].stats.sac['baz']
        e = ste[idx].data
        n = stn[idx].data
        r = e*np.sin((ba+180)*2*np.pi/360)+n*np.cos((ba+180)*2*np.pi/360)
        t = e*np.cos((ba+180)*2*np.pi/360)-n*np.sin((ba+180)*2*np.pi/360)
	str[idx].data = r
	str[idx].stats.channel = 'R'
	stt[idx].data = t
	stt[idx].stats.channel = 'T'
    return str,stt

def set_az_gcarc(st,**kwargs):
    f = kwargs.get('f',0.0033528106647474805)
    for tr in st:
	a = obspy.geodetics.gps2dist_azimuth(tr.stats.sac['evla'],
                                              tr.stats.sac['evlo'],
                                              tr.stats.sac['stla'],
                                              tr.stats.sac['stlo'],f=f)
	tr.stats.sac['baz'] = a[-1]
	tr.stats.sac['az'] = a[-2]
	tr.stats.sac['gcarc'] = a[0]/111195.
    return st

def station_list_filter(stn,ste):
    stat_list_e = []
    stat_list_n = []
    for tr in stn:
        if tr.stats.station+tr.stats.network in stat_list_n:
            stn.remove(tr)
        stat_list_n.append(tr.stats.station+tr.stats.network)
    for tr in ste:
        if tr.stats.station+tr.stats.network in stat_list_e:
            ste.remove(tr)
        stat_list_e.append(tr.stats.station+tr.stats.network)
    I = list(set(stat_list_e).intersection(set(stat_list_n)))
    for tr in stn:
        if tr.stats.station+tr.stats.network not in I:
            stn.remove(tr)
    for tr in ste:
        if tr.stats.station+tr.stats.network not in I:
            ste.remove(tr)
    return stn,ste

def interpolate_filter(st):
    for tr in st:
        t = int(round(tr.stats.endtime-tr.stats.starttime))
        if t != 3600:
            st.remove(tr)
        if len(tr.data) < 36000:
            tr.data = np.pad(tr.data,(0,36000-len(tr.data)),'constant')
        if len(tr.data) > 36000:
            tr.data = tr.data[0:36000]
    return st

def read_stream(dirname):
    #stz = obspy.read(dirname+'*HZ*')
    ste = obspy.read(dirname+'*HE*')
    stn = obspy.read(dirname+'*HN*')
    #stz.interpolate(10)
    stn.interpolate(10)
    ste.interpolate(10)
    return stn,ste

main()

