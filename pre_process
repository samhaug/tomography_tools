#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : pre_process.py
Purpose : Automated data cleaner for length and station intersection
Creation Date : 14-08-2017
Last Modified : Mon 14 Aug 2017 01:57:02 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from subprocess import call
import os
import obspy
from sys import argv

def main():
    os.mkdir('pre_processed_clean')
    stz,stn,ste = read_stream('processed/')
    stz = interpolate_filter(stz)
    ste = interpolate_filter(ste)
    stn = interpolate_filter(stn)
    stz,stn,ste = station_list_filter(stz,stn,ste)
    stz.sort(['station'])
    ste.sort(['station'])
    stn.sort(['station'])
    stz = set_az_gcarc(stz)
    stn = set_az_gcarc(stn)
    ste = set_az_gcarc(ste)
    r,t = obspy_rotate_ne_rt(stn,ste)
    #r.write('pre_processed_clean/R.sac',format='SAC')
    t.write('pre_processed_clean/T.sac',format='SAC')
    stz.write('pre_processed_clean/Z.sac',format='SAC')

def obspy_rotate_ne_rt(stn,ste):
    str = stn.copy()
    stt = stn.copy()
    for idx,tr in enumerate(stn):
        ba = ste[idx].stats.sac['baz']
        e = ste[idx].data
        n = stn[idx].data
        r = e*np.sin((ba+180)*2*np.pi/360)+n*np.cos((ba+180)*2*np.pi/360)
        t = e*np.cos((ba+180)*2*np.pi/360)-n*np.sin((ba+180)*2*np.pi/360)
	str[idx].data = r
	str[idx].stats.channel = 'R'
	stt[idx].data = t
	stt[idx].stats.channel = 'T'
    return str,stt

def set_az_gcarc(st,**kwargs):
    f = kwargs.get('f',0.0033528106647474805)
    for tr in st:
	a = obspy.geodetics.gps2dist_azimuth(tr.stats.sac['evla'],
                                              tr.stats.sac['evlo'],
                                              tr.stats.sac['stla'],
                                              tr.stats.sac['stlo'],f=f)
	tr.stats.sac['baz'] = a[-1]
	tr.stats.sac['az'] = a[-2]
	tr.stats.sac['gcarc'] = a[0]/111195.
    return st

def station_list_filter(stz,ste,stn):
    stat_list_z = []
    stat_list_e = []
    stat_list_n = []
    for tr in stz:
        stat_list_z.append(tr.stats.station+tr.stats.network)
        if tr.stats.station+tr.stats.network in stat_list_z:
            stz.remove(tr)
    for tr in stn:
        stat_list_n.append(tr.stats.station+tr.stats.network)
        if tr.stats.station+tr.stats.network in stat_list_n:
            stn.remove(tr)
    for tr in ste:
        stat_list_e.append(tr.stats.station+tr.stats.network)
        if tr.stats.station+tr.stats.network in stat_list_e:
            ste.remove(tr)
    I = list(set(stat_list_e).intersection(set(stat_list_n)).intersection(set(stat_list_z)))
    for tr in stz:
        if tr.stats.station+tr.stats.network not in I:
            stz.remove(tr)
    for tr in stn:
        if tr.stats.station+tr.stats.network not in I:
            stn.remove(tr)
    for tr in ste:
        if tr.stats.station+tr.stats.network not in I:
            ste.remove(tr)
    return stz,stn,ste

def interpolate_filter(st):
    samples = int(3600*10)
    for tr in st:
        tr.data = tr.data[0:samples]
        if len(tr.data) <= (samples-5):
            st.remove(tr)
        elif len(tr.data) > (samples-5) and len(tr.data) < samples:
            fill = len(tr.data)-samples
            tr.data = np.hstack((tr.data,np.zeros(fill)))
    return st

def read_stream(dirname):
    stz = obspy.read(dirname+'*BHZ*')
    ste = obspy.read(dirname+'*BHE*')
    stn = obspy.read(dirname+'*BHN*')
    stz.interpolate(10)
    stn.interpolate(10)
    ste.interpolate(10)
    return stz,stn,ste

main()

