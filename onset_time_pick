#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : travel_time_compute.py
Purpose : Measure and record traveltime delays
Creation Date : 12-09-2017
Last Modified : Wed 27 Sep 2017 04:18:24 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

from numpy import round,argmax,max,abs,linspace,roll,pi,hstack,transpose,savetxt,mean,nan_to_num,zeros,where,sqrt,sum
from scipy.signal import argrelmax as arm
from numpy.fft import fft,fftfreq
from os import listdir,getcwd
from matplotlib import pyplot as plt
import matplotlib.gridspec as gridspec
import obspy
from scipy.signal import correlate,butter,freqs
import argparse
from obspy.taup import TauPyModel
import time
model = TauPyModel(model='iasp91')

def main():
    parser = argparse.ArgumentParser(
                       description='Measure and record traveltime delays')
    parser.add_argument('-p','--phase',metavar='N',type=str,
                        help='Name of phase')
    parser.add_argument('-f','--fname',metavar='N',type=str,default=False,
                        help='Name of accepted file (optional)')
    parser.add_argument('-w','--window',default=40,type=int,
                        help='Half of the window length')
    parser.add_argument('-d','--data',type=str,
                        help='Path to data pickle')
    parser.add_argument('-fmax','--fmax',type=float,
                        default=1/3.,help='max frequency')
    parser.add_argument('-fmin','--fmin',type=float,
                        default=1/50.,help='min frequency')
    parser.add_argument('--stride',default=1,type=int,
                        help='Use every Nth trace in stream')
    parser.add_argument('--plot',dest='plot',
                        action='store_true',help='Plot waveforms')
    args = parser.parse_args()


    if args.window == 0.:
        args.window = 2*1./args.fmax

    fname = write_header(args.phase,args)
    branch_list = phase_info(args.phase)
    write_branch(fname,branch_list)
    std = read_streams(args.data)
    welcome_message(args,std)
    std = phase_range(std,args.phase)
    std.filter('bandpass',freqmin=args.fmin,freqmax=args.fmax,zerophase=True)
    now = time.time()

    if args.fname != False:
        st_id = display_id(args)
    elif not args.fname:
        st_id = range(0,len(std),args.stride)

    i = 0
    for idx,ii in enumerate(st_id):
        total = len(st_id)
        print ii,'{}%'.format(round(float(idx)/total*100.))
        t,s,key = find_ttime(std[ii],[args.phase],(-1*args.window,args.window),args.plot,args)
        if key == 'escape':
            break


    then = time.time()
    rate = (len(std)/args.stride)/(then-now)
    print 'Total time: {} sec\n'.format(then-now)
    print 'Your rate: {} traces/sec\n'.format(rate)
    print '{} Proposed picks\n'.format(idx)
    print '{} Accepted picks\n'.format(i)

def display_id(args):
    f = open(args.fname,'r').readlines()
    st_id = []
    for ii in f:
        if len(ii.strip().split()) < 5:
            continue
        else:
            st_id.append(int(ii.strip().split()[0]))
    return st_id

def welcome_message(args,st):
    print('#######################################')
    print('Computing and recording ray-theory traveltime onset')
    print('#######################################')
    print 'Data file: ',args.data
    print 'Number of traces: ',len(st)
    print 'Measuring delay of phase ',args.phase
    print 'Event depth: {}km'.format(str(st[0].stats.evdp))
    print 'Phase window is {} seconds long'.format(2*args.window)
    print 'Using every {} traces'.format(args.stride)
    if args.plot:
        print('Plotting is on')
    if args.plot != True:
        print('Plotting is off')
    print('#######################################')

def find_ttime(data_tr,phase,window_tuple,plot,args):
    samp = data_tr.stats.sampling_rate
    d_o = data_tr.stats.o
    d_st = data_tr.stats.starttime
    d_et = data_tr.stats.endtime
    env_tr = data_tr.copy()
    env_tr.data = obspy.signal.filter.envelope(data_tr.data)

    time = model.get_travel_times(source_depth_in_km=data_tr.stats.evdp,
                              distance_in_degree=data_tr.stats.gcarc,
                              phase_list=phase)[0].time

    n = env_tr.slice(d_st+time+d_o-130,
                       d_st+time+d_o-30).data
    d = env_tr.slice(d_st+time+d_o+window_tuple[0],
                      d_st+time+d_o+window_tuple[1]).data

    t = linspace(window_tuple[0],window_tuple[1],num=len(d))
    T = window_tuple[1]
    SNR_1 = round(max(d)/max(n),2)
    SNR_2 = round(max(d)/mean(n),2)
    n_mean = mean(n)
    d_max = argmax(d)
    noise_cutoff = 16
    pick = argmax(d>n_mean*noise_cutoff*1.5)

    SNR = (SNR_1,SNR_2)

    if plot == True:
        if phase[0].startswith('S') or phase[0].startswith('sS'):
            ds_time = model.get_travel_times(source_depth_in_km=data_tr.stats.evdp,
                              distance_in_degree=data_tr.stats.gcarc,
                              phase_list=['S'])
            dp_time = 0
        if phase[0] == 'P':
            dp_time = model.get_travel_times(source_depth_in_km=data_tr.stats.evdp,
                              distance_in_degree=data_tr.stats.gcarc,
                              phase_list=['p'+phase[0]])[0].time
            ds_time = model.get_travel_times(source_depth_in_km=data_tr.stats.evdp,
                              distance_in_degree=data_tr.stats.gcarc,
                              phase_list=['s'+phase[0]])[0].time
        class ClickSelect(object):
            def __init__(self):
                self.key = None
                fig = plt.gcf()
                fig.canvas.mpl_connect('key_press_event', self.on_key)
            def on_key(self,event):
                self.key = event.key
                plt.close()
                return True

        gs = gridspec.GridSpec(50, 100)
        ax_bot = plt.subplot(gs[0:24,:])
        ax_full = plt.subplot(gs[26:50,:])

        ax_full.yaxis.set_ticklabels([])
        ax_bot.yaxis.set_ticklabels([])
        td_full = linspace(-1*d_o,d_et-d_st-d_o,
                           num=data_tr.stats.npts)
        ts_full = linspace(-1*d_o,d_et-d_st-d_o,
                           num=env_tr.stats.npts)
        ax_bot.plot(td_full,data_tr.data,color='k')
        ax_bot.plot(ts_full,env_tr.data,color='r')
        ax_full.plot(td_full,data_tr.data,color='k')
        ax_full.plot(ts_full,env_tr.data,color='r')
        ax_full.set_xlim(0,int(env_tr.stats.npts/env_tr.stats.sampling_rate))
        ax_bot.set_xlim(time+env_tr.stats.o-50,time+env_tr.stats.o+50)
        ax_bot.set_ylim(data_tr.data.min()*1.4,data_tr.data.max()*1.4)
        ax_bot.axvline(time,color='k',lw=2)
        ax_bot.axvline(time+window_tuple[0]+(pick/samp),color='k')
        ax_bot.axvspan(d_st+time+d_o-130,d_st+time+d_o-30,color='b',alpha=0.3)
        ax_bot.axvspan(time+env_tr.stats.o+window_tuple[0],time+env_tr.stats.o+window_tuple[1],color='k',alpha=0.2)
        ax_full.axvspan(time+env_tr.stats.o-(2./args.fmin),time+env_tr.stats.o-30,color='b',alpha=0.3)
        ax_full.axvspan(time+env_tr.stats.o+window_tuple[0],time+env_tr.stats.o+window_tuple[1],color='k',alpha=0.2)
        for ii in ds_time:
            ax_bot.text(ii.time,0,ii.name)
        ax_bot.axvline(dp_time,color='k')

        clicks = ClickSelect()
        fig = plt.gcf()
        if nan_to_num(max(SNR)) < noise_cutoff or nan_to_num(max(SNR)) > 15000:
            fig.set_facecolor('red')
        else:
            fig.set_facecolor('limegreen')

        plt.figtext(0.1,0.95,'press ctrl to save')

        plt.show()
        key = clicks.key
    else:
        key = 'control'

    return t,SNR,key

def read_streams(data_pickle):
    std = obspy.read(data_pickle)
    std.sort(['network'])
    std.differentiate()
    std.interpolate(10)
    return std

def write_traveltime(fname,tr,tsig,tobs,corcoeft,nbt,xcl,tincore):
    idate=str(tr.stats.starttime.year)[-2::]+'%03d'%tr.stats.starttime.day
    iotime='%02d%02d%02d'%(tr.stats.starttime.hour,
                           tr.stats.starttime.minute,
                           tr.stats.starttime.second)
    ievt='1'
    kluster='0'
    stationcode=tr.stats.station
    netw=tr.stats.network
    comp=tr.stats.channel
    slat=round(tr.stats.evla,2)
    slon=round(tr.stats.evlo,2)
    sdep=round(tr.stats.evdp,2)
    rlat=round(tr.stats.stla,2)
    rlon=round(tr.stats.stlo,2)
    relev=0.0
    nobst=1
    nobsa=0
    #number of polar crossings
    kpole=0
    line_2 = '1 0 00\n'
    line_3 = '1\n'
    line_5 = '0\n'
    with open(fname,'a') as f:
        f.write('{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}\n'.format(
                str(idate),
                str(iotime),
                str(ievt),
                str(kluster),
                stationcode,
                netw,
                comp,
                str(slat),
                str(slon),
                str(sdep),
                str(rlat),
                str(rlon),
                str(relev),
                str(nobst),
                str(nobsa),
                str(kpole),
                ))
        f.write(line_2)
        f.write(line_3)
        f.write('{} {} {} {} {} {}\n'.format(
                 str(tobs),
                 str(tsig),
                 str(corcoeft[1]),
                 str(int(nbt)),
                 str(2.*xcl),
                 str(int(tincore))))
        f.write(line_5)

def write_header(phase_name,args):
    if not args.fname:
        fname = '{}_{}_ray.dat'.format(getcwd().split('/')[-1],
                                  phase_name)
    elif args.fname != False:
        fname = '{}_{}_ray.rev'.format(getcwd().split('/')[-1],
                                  phase_name)
    with open(fname,'w') as f:
        f.write(fname+'\n')
        f.write('None\n')
    return fname

def write_f_resp(fname,fmin,fmax):
    fmin *= 2*pi
    fmax *= 2*pi
    b,a = butter(4,(fmin,fmax),'bandpass',analog=True)
    w,h = freqs(b, a)
    w = round(w,5)
    h = abs(w*round(h,5))
    freq_resp = hstack((transpose([w]),transpose([h])))
    with open(fname,'a') as f:
        f.write('1\n')
        f.write('{}\n'.format(len(w)))
        savetxt(f,freq_resp,fmt='%1.7f')

def write_branch(fname,branch_list):
    with open(fname,'a') as f:
        for ii in branch_list:
            f.write(ii+'\n')

def phase_info(phase_name):
    if phase_name == 'sSdiff':
        branch_list = ['sSdiff','sSdiff','DONT USE','DONT USE','DONT USE']
    elif phase_name == 'Sdiff':
        branch_list = ['Sdiff','Sdiff','DONT USE','DONT USE','DONT USE']

    elif phase_name == 'S':
        branch_list = ['S','S','6371 1 2','3482 2 2','6371 5 0']
    elif phase_name == 'sS':
        branch_list = ['sS','sS','6300 0 2','6371 1 2','3482 3 2','6371 5 0']

    elif phase_name == 'ScS':
        branch_list = ['ScS','ScS','6371 1 2','3482 3 2','6371 5 0']
    elif phase_name == 'ScSScS':
        branch_list = ['ScSScS','ScSScS','6371 1 2','3482 3 2','6371 3 2','3482 3 2','6371 5 0']
    elif phase_name == 'ScSScSScS':
        branch_list = ['ScSScSScS','ScSScSScS','6371 1 2','3482 3 2','6371 3 2','3482 3 2','6371 3 2','3482 3 2','6371 5 0']

    elif phase_name == 'SS':
        branch_list = ['SS','SS','6371 1 2','3482 2 2','6371 3 2','3482 2 2','6371 5 0']
    elif phase_name == 'SSS':
        branch_list = ['SSS','SSS','6371 1 2','3482 2 2','6371 3 2','3482 2 2','6371 3 2','3482 2 2','6371 5 0']

    elif phase_name == 'SKS':
        branch_list = ['SKS','SKS','6371 1 2','3482 4 1','3482 4 2','6371 5 0']
    elif phase_name == 'SKKS':
        branch_list = ['SKS','SKS','6371 1 2','3482 4 1','3482 3 1','3482 4 2','6371 5 0']

    elif phase_name == 'P':
        branch_list = ['P','P','6371 1 1','3482 2 1','6371 5 0']
    elif phase_name == 'PP':
        branch_list = ['PP','PP','6371 1 1','3482 2 1','6371 3 1','3482 2 1','6371 5 0']
    elif phase_name == 'PPP':
        branch_list = ['PPP','PPP','6371 1 1','3482 2 1','6371 3 1','3482 2 1','6371 3 1','3482 2 1','6371 5 0']
    else:
        print('Phase name first argument')
    return branch_list

def phase_range(std,phase_name):
    if phase_name == 'S' or phase_name == 'sS':

        for tr in std:
            if tr.stats.gcarc > 95.:
                std.remove(tr)
            if tr.stats.gcarc < 27.:
                std.remove(tr)

    if phase_name == 'Sdiff' or phase_name == 'sSdiff':

        for tr in std:
            if tr.stats.gcarc > 150.:
                std.remove(tr)
            if tr.stats.gcarc < 105.:
                std.remove(tr)

    if phase_name == 'SS' or phase_name == 'sSS':

        for tr in std:
            if tr.stats.gcarc < 56.:
                std.remove(tr)

    if phase_name == 'SSS' or phase_name == 'sSSS':

        for tr in std:
            if tr.stats.gcarc < 85.:
                std.remove(tr)

    if phase_name == 'ScS' or phase_name == 'sScS':

        for tr in std:
            if tr.stats.evdp < 200:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 25:
                    continue
                elif tr.stats.gcarc > 52 and tr.stats.gcarc < 70:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 200 and tr.stats.evdp < 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 25:
                    continue
                elif tr.stats.gcarc > 52 and tr.stats.gcarc < 70:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 31:
                    continue
                elif tr.stats.gcarc > 52 and tr.stats.gcarc < 70:
                    continue
                else:
                    std.remove(tr)

    if phase_name == 'ScSScS' or phase_name == 'sScSScS':

        for tr in std:
            if tr.stats.evdp < 200:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 60:
                    continue
                elif tr.stats.gcarc > 96 and tr.stats.gcarc < 160:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 200 and tr.stats.evdp < 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 60:
                    continue
                elif tr.stats.gcarc > 96 and tr.stats.gcarc < 160:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 73:
                    continue
                elif tr.stats.gcarc > 96 and tr.stats.gcarc < 160:
                    continue
                else:
                    std.remove(tr)


    if phase_name == 'ScSScSScS' or phase_name == 'sScSScSScS':

        for tr in std:
            if tr.stats.evdp < 200:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 90:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 200 and tr.stats.evdp < 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 90:
                    continue
                else:
                    std.remove(tr)
            elif tr.stats.evdp > 400:
                if tr.stats.gcarc > 2. and tr.stats.gcarc < 120:
                    continue
                else:
                    std.remove(tr)

    if phase_name == 'SKS':
        for tr in std:
            if tr.stats.gcarc > 85 and tr.stats.gcarc < 135:
                continue
            else:
                std.remove(tr)

    if phase_name == 'SKKS':
        for tr in std:
            if tr.stats.gcarc > 110 and tr.stats.gcarc < 140:
                continue
            else:
                std.remove(tr)

    if phase_name == 'P' or phase_name == 'pP':

        for tr in std:
            if tr.stats.gcarc > 98.:
                std.remove(tr)
            if tr.stats.gcarc < 27.:
                std.remove(tr)

    if phase_name == 'Pdiff' or phase_name == 'pPdiff':

        for tr in std:
            if tr.stats.gcarc < 100.:
                std.remove(tr)
            if tr.stats.gcarc > 150.:
                std.remove(tr)

    if phase_name == 'PP' or phase_name == 'pPP':

        for tr in std:
            if tr.stats.gcarc < 56.:
                std.remove(tr)

    if phase_name == 'PPP' or phase_name == 'pPPP':

        for tr in std:
            if tr.stats.gcarc < 85.:
                std.remove(tr)

    if phase_name == 'PKP' or phase_name == 'pPKP':

        for tr in std:
            if tr.stats.gcarc < 140.:
                std.remove(tr)

    return std

def write_amp_header(phase_name,fmin,fmax):
    fname = '{}_{}_{}.dat'.format(getcwd().split('/')[-1],
                                  phase_name,
                                  round(1./fmax))
    with open(fname,'w') as f:
        f.write(fname+'\n')
        f.write('fmin,fmax''\n')
        f.write('{} {}\n'.format(fmin,fmax))
        f.write('idate,iotime,stat,netw,comp,slat,slon,sdep,rlat,rlon,relev,tobs,delt,corcoeft,m1,m2,s_amp,d_amp,SNR1,SNR2,amp_rat\n')
    return fname

def write_amplitude(fname,ii,tr,tobs,corcoeft,m1,m2,update_m1,update_m2,s_amp,d_amp,del_t,SNR,amp_rat,left_rat,right_rat,lsq):
    idate=str(tr.stats.starttime.year)[-2::]+'%03d'%tr.stats.starttime.day
    iotime='%02d%02d%02d'%(tr.stats.starttime.hour,
                           tr.stats.starttime.minute,
                           tr.stats.starttime.second)
    stationcode=tr.stats.station
    netw=tr.stats.network
    comp=tr.stats.channel
    slat=round(tr.stats.evla,2)
    slon=round(tr.stats.evlo,2)
    sdep=round(tr.stats.evdp,2)
    rlat=round(tr.stats.stla,2)
    rlon=round(tr.stats.stlo,2)
    gcarc = round(tr.stats.gcarc,2)
    relev=0.0
    #number of polar crossings
    line_2 = '1 0 00\n'
    line_3 = '1\n'
    line_5 = '0\n'
    with open(fname,'a') as f:
        f.write('{} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {} {}\n'.format(
                str(ii),
                str(idate),
                str(iotime),
                '%5s'%stationcode,
                '%3s'%netw,
                '%3s'%comp,
                '%1.2f'%slat,
                '%1.2f'%slon,
                '%1.1f'%sdep,
                '%1.1f'%rlat,
                '%1.1f'%rlon,
                '%1.2f'%relev,
                '%1.1f'%tobs,
                '%1.1f'%del_t,
                '%1.3f'%corcoeft[0],
                '%1.3f'%corcoeft[1],
                '%1.3f'%m1,
                '%1.3f'%m2,
                '%1.3f'%update_m1,
                '%1.3f'%update_m2,
                '%1.2e'%s_amp,
                '%1.2e'%d_amp,
                '%1.2f'%SNR[0],
                '%1.2f'%SNR[1],
                '%1.2f'%amp_rat,
                '%1.2f'%left_rat,
                '%1.2f'%right_rat,
                '%1.2f'%lsq,
                '%1.2f'%gcarc,
                ))

def monochrome(tt,yy):
    '''
    Find likliest frequency
    '''
    #tt = np.linspace(0,tr.stats.endtime-tr.stats.starttime,num=tr.stats.npts)
    #yy = tr.data
    ff = fftfreq(len(tt),(tt[1]-tt[0]))
    Fyy = abs(fft(yy))
    freq = abs(ff[argmax(Fyy[1:])+1])
    return freq

main()

