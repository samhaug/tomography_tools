#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : travel_time_compute.py
Purpose : Measure and record traveltime delays
Creation Date : 12-09-2017
Last Modified : Wed 27 Sep 2017 04:18:24 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

from numpy import round,argmax,max,abs,linspace,roll,pi,hstack,transpose,savetxt,mean,nan_to_num,zeros,where,sqrt,sum,array
from scipy.signal import argrelmax as arm
from scipy.signal import convolve
from numpy.fft import fft,fftfreq
from os import listdir,getcwd
from matplotlib import pyplot as plt
import matplotlib.gridspec as gridspec
import obspy
from scipy.signal import correlate,butter,freqs,cosine
import argparse
from obspy.taup import TauPyModel
import time
model = TauPyModel(model='iasp91')

def main():
    parser = argparse.ArgumentParser(
                       description='Measure and record traveltime delays')
    parser.add_argument('-p','--phase',metavar='N',type=str,
                        help='Name of phase')
    parser.add_argument('-f','--fname',metavar='N',type=str,default=False,
                        help='Name of accepted file (optional)')
    parser.add_argument('-w','--window',default=30,type=int,
                        help='Half of the window length')
    parser.add_argument('-d','--data',type=str,
                        help='Path to data pickle')
    parser.add_argument('--stride',default=1,type=int,
                        help='Use every Nth trace in stream')
    parser.add_argument('--plot',dest='plot',
                        action='store_true',help='Plot waveforms')
    args = parser.parse_args()

    std = obspy.read(args.data)
    for tr in std:
        if tr.stats.gcarc > 98.:
            std.remove(tr)
        if tr.stats.gcarc < 27.:
            std.remove(tr)
    welcome_message(args,std)
    std.differentiate()
    std.interpolate(4)
    std.filter('highpass',freq=1./5,zerophase=True)
    now = time.time()

    if args.fname != False:
        st_id = display_id(args)
    elif not args.fname:
        st_id = range(0,len(std),args.stride)

    i = 0
    for idx,ii in enumerate(st_id):
        total = len(st_id)
        print ii,'{}%'.format(round(float(idx)/total*100.))
        pick_list = []
        d_list = []
        for jj in range(1,7):
            print jj
            tr = std[ii].copy()
            tr.data = convolve(tr.data,cosine(tr.stats.sampling_rate*jj),mode='same')
            pick,SNR_1 = find_ttime(tr,['P'],(-1*args.window,args.window),
                                 args.plot,args)
        plt.show()


    then = time.time()
    rate = (len(std)/args.stride)/(then-now)
    print 'Total time: {} sec\n'.format(then-now)
    print 'Your rate: {} traces/sec\n'.format(rate)
    print '{} Proposed picks\n'.format(idx)
    print '{} Accepted picks\n'.format(i)

def display_id(args):
    f = open(args.fname,'r').readlines()
    st_id = []
    for ii in f:
        if len(ii.strip().split()) < 5:
            continue
        else:
            st_id.append(int(ii.strip().split()[0]))
    return st_id

def welcome_message(args,st):
    print('#######################################')
    print('Computing and recording ray-theory traveltime onset')
    print('#######################################')
    print 'Data file: ',args.data
    print 'Number of traces: ',len(st)
    print 'Measuring delay of phase ',args.phase
    print 'Event depth: {}km'.format(str(st[0].stats.evdp))
    print 'Phase window is {} seconds long'.format(2*args.window)
    print 'Using every {} traces'.format(args.stride)
    if args.plot:
        print('Plotting is on')
    if args.plot != True:
        print('Plotting is off')
    print('#######################################')

def find_ttime(data_tr,phase,window_tuple,plot,args):
    samp = data_tr.stats.sampling_rate
    d_o = data_tr.stats.o
    d_st = data_tr.stats.starttime
    d_et = data_tr.stats.endtime
    env_tr = data_tr.copy()
    env_tr.data = obspy.signal.filter.envelope(data_tr.data)

    time = model.get_travel_times(source_depth_in_km=data_tr.stats.evdp,
                              distance_in_degree=data_tr.stats.gcarc,
                              phase_list=phase)[0].time

    n = env_tr.slice(d_st+time+d_o-130,
                     d_st+time+d_o-30).data
    d = env_tr.slice(d_st+time+d_o+window_tuple[0],
                     d_st+time+d_o+window_tuple[1]).data

    norm_d = array(d/d.max())
    pick_id = where(norm_d>0.5)[0][0]
    print pick_id
    pick = (len(d)/2.-pick_id)/samp
    t = linspace(window_tuple[0],window_tuple[1],num=len(d))
    T = window_tuple[1]
    SNR_1 = round(max(d)/max(n),2)
    plt.plot(linspace(window_tuple[0],window_tuple[1],num=len(norm_d)),norm_d,
             alpha=0.5,lw=0.5)
    plt.axvline(pick)

    return pick,SNR_1

main()

