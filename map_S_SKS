#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : map_S_SKS
Purpose : map S - SKS traveltimes
Creation Date : 12-09-2017
Last Modified : Mon 18 Sep 2017 04:43:24 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from obspy.geodetics.base import gps2dist_azimuth
import geopy
from geopy.distance import VincentyDistance
from matplotlib import pyplot as plt
from sys import argv,exit
from mpl_toolkits.basemap import Basemap
import matplotlib.colors as colors
import matplotlib.cm as cmx
from glob import glob
from matplotlib.colorbar import ColorbarBase
import matplotlib.gridspec as gridspec
import argparse
from glob import glob


def main():
    parser = argparse.ArgumentParser(
                       description='map S-SS delays')
    parser.add_argument('-S','--s_file',metavar='*S.dat',type=str,
                        help='Name of S file')
    parser.add_argument('-SKS','--sks_file',default='*SS.dat',type=str,
                        help='name of SKS file')

    args = parser.parse_args()
    s_list = glob(args.s_file)
    ss_list = glob(args.sks_file)
    s_list.sort()
    ss_list.sort()
    print s_list,ss_list

    if len(s_list) != len(ss_list):
        print 'Need equal number of SKS and S files'
        exit()

    args = parser.parse_args()
    fig,ax = plt.subplots()
    #m = Basemap(projection='eck4',lon_0=180,resolution='c')
    m = Basemap(projection='mbtfpq',lon_0=180,resolution='c')
    m.drawparallels(np.arange(-90.,120.,30.))
    m.drawmeridians(np.arange(0.,360.,60.))
    m.drawcoastlines()
    for ii in range(len(s_list)):
        print s_list[ii],ss_list[ii]
        list_plot(s_list[ii],ss_list[ii],m)
    plt.tight_layout()
    plt.show()

def list_plot(s_file,ss_file,m):
    S_dict = ray_paths(s_file)
    SS_dict = ray_paths(ss_file)
    stations = set(S_dict.keys()).intersection(set(SS_dict.keys()))
    print 'Total measurements: ', len(stations)
    a = []
    for ii in stations:
        a.append(SS_dict[ii]['del_t']-S_dict[ii]['del_t'])

    for ii in stations:
        del_t = SS_dict[ii]['del_t']-S_dict[ii]['del_t']
        slat = S_dict[ii]['slat']
        slon = S_dict[ii]['slon']
        rlat = S_dict[ii]['rlat']
        rlon = S_dict[ii]['rlon']
        plot_coords(m,slat,slon,rlat,rlon,del_t)

def plot_coords(m,slat,slon,rlat,rlon,del_t):
    stlo,stla = m(rlon,rlat)
    bearing = gps2dist_azimuth(slat,slon,rlat,rlon)[1]
    dist = gps2dist_azimuth(slat,slon,rlat,rlon)[0]/2000.
    origin = geopy.Point(slat,slon)
    destination = VincentyDistance(kilometers=dist).destination(origin,bearing)
    lon,lat = m(destination[1],destination[0])
    if abs(del_t) <= 2:
        size = 10
    if 2 < abs(del_t) and abs(del_t) <= 4:
        size = 20
    if 4 < abs(del_t) and abs(del_t) <= 6:
        size = 30
    if 6 < abs(del_t) and abs(del_t) <= 8:
        size = 40
    if 8 < abs(del_t) and abs(del_t) <= 10:
        size = 50
    if 10 < abs(del_t) and abs(del_t) <= 12:
        size = 60
    if abs(del_t) > 12:
        size = 70
    if del_t <= 0:
        color = 'blue'
        marker = 'o'
    if del_t > 0:
        color = 'red'
        marker = 'x'

    m.scatter(lon,lat,linewidth=1,color=color,alpha=0.6,s=1.5*size,marker=marker)

def ray_paths(fname):
    ray_dict = {}
    a = open(fname,'r').readlines()
    for ii in a:
        if len(ii.split()) > 4:
            b = ii.split()
            key = str(b[3]+b[4])
            ray_dict[key] = {}
            ray_dict[key]['slat'] = float(b[6])
            ray_dict[key]['slon'] = float(b[7])
            ray_dict[key]['rlat'] = float(b[9])
            ray_dict[key]['rlon'] = float(b[10])
            ray_dict[key]['del_t'] = float(b[13])

    return ray_dict

main()

