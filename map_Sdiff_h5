#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : map_Sdiff
Purpose : map Sdiff traveltimes from h5 data_file
Creation Date : 12-09-2017
Last Modified : Mon 18 Sep 2017 04:43:24 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from obspy.geodetics.base import gps2dist_azimuth
import geopy
from geopy.distance import VincentyDistance
from matplotlib import pyplot as plt
from mpl_toolkits.basemap import Basemap
import argparse
import h5py
from glob import glob


def main():
    parser = argparse.ArgumentParser(
                       description='map Sdiff times')
    parser.add_argument('-f','--h5_files',metavar='*picks.h5',type=str,
                        help='list of h5_files')
    parser.add_argument('-l','--max_dist',metavar='float',type=float,
                        default=180,help='maximum_distance (deg)')
    parser.add_argument('-s','--min_dist',metavar='float',type=float,
                        default=0,help='minimum distance (deg)')

    args = parser.parse_args()
    fig,ax = plt.subplots()
    dat_list = glob(args.h5_files)
    m = Basemap(projection='mbtfpq',lon_0=180,resolution='c')
    m.drawparallels(np.arange(-90.,120.,30.))
    m.drawmeridians(np.arange(0.,360.,60.))
    m.drawcoastlines()
    total = 0
    for ii in dat_list:
        print ii
        h5f = h5py.File(ii,'r',driver='core')
        c = list_plot(h5f,m,total,'Sdiff15',args)
        c = list_plot(h5f,m,total,'Sdiff30',args)
        total += c
    print 'Total measurements: ',total
    plt.tight_layout()
    plt.show()

def list_plot(h5f,m,total,name,args):
    s_dat = h5f[name]['pick_info'][:]
    s_del = np.array([float(ii) for ii in s_dat[:,11]])
    slat = np.array([float(ii) for ii in s_dat[:,2]])
    slon = np.array([float(ii) for ii in s_dat[:,3]])
    rlat = np.array([float(ii) for ii in s_dat[:,4]])
    rlon = np.array([float(ii) for ii in s_dat[:,5]])
    gcarc = np.array([float(ii) for ii in s_dat[:,6]])
    print 'Measurements: ', len(s_del)
    for ii in range(len(slat)):
        if gcarc[ii] <= args.max_dist and gcarc[ii] >= args.min_dist:
            plot_coords(m,slat[ii],slon[ii],rlat[ii],rlon[ii],s_del[ii])
        else:
            continue
    return len(s_del)

def plot_coords(m,slat,slon,rlat,rlon,del_t):
    stlo,stla = m(rlon,rlat)
    bearing = gps2dist_azimuth(slat,slon,rlat,rlon)[1]
    dist = gps2dist_azimuth(slat,slon,rlat,rlon)[0]/2000.
    origin = geopy.Point(slat,slon)
    destination = VincentyDistance(kilometers=dist).destination(origin,bearing)
    lon,lat = m(destination[1],destination[0])
    if abs(del_t) <= 2:
        size = 10
    if 2 < abs(del_t) and abs(del_t) <= 4:
        size = 20
    if 4 < abs(del_t) and abs(del_t) <= 6:
        size = 30
    if 6 < abs(del_t) and abs(del_t) <= 8:
        size = 40
    if 8 < abs(del_t) and abs(del_t) <= 10:
        size = 50
    if 10 < abs(del_t) and abs(del_t) <= 12:
        size = 60
    if abs(del_t) > 12:
        size = 70
    if del_t <= 0:
        color = 'blue'
        marker = 'o'
    if del_t > 0:
        color = 'red'
        marker = 'x'
    m.scatter(lon,lat,linewidth=1,color=color,alpha=0.6,s=1.5*size,marker=marker)

main()

