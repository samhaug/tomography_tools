#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : remove_excess
Purpose : Remove R and T synthetics with no associated data
Creation Date : 14-08-2017
Last Modified : Mon 14 Aug 2017 01:57:02 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from subprocess import call
import os
import obspy
from sys import argv
from glob import glob
from matplotlib import pyplot as plt

def main():
    sts = obspy.read('sts_R.h5')
    st  = obspy.read('st_R.h5')
    sts = remove_redundant(sts)
    st = remove_redundant(st)
    st,sts = brute_remove(st,sts)
    st,sts = set_remove(st,sts)
    st.sort(['station'])
    sts.sort(['station'])

    if len(st) == len(sts):
        print('Even R')
    else:
        print('UNEVEN R')

    st.write('st_R.h5',format='H5')
    sts.write('sts_R.h5',format='H5')

    sts = obspy.read('sts_T.h5')
    st  = obspy.read('st_T.h5')
    sts = remove_redundant(sts)
    st = remove_redundant(st)
    st,sts = brute_remove(st,sts)
    st,sts = set_remove(st,sts)
    st.sort(['station'])
    sts.sort(['station'])
    if len(st) == len(sts):
        print('Even T')
    else:
        print('UNEVEN T')

    st.write('st_T.h5',format='H5')
    sts.write('sts_T.h5',format='H5')

def set_remove(st,sts):
    d = []
    for tr in st:
        d.append(tr.stats.network+tr.stats.station+tr.stats.location)
    s = []
    for tr in sts:
        s.append(tr.stats.network+tr.stats.station+tr.stats.location)
    c = set(d).intersection(set(s))

    for tr in sts:
        if tr.stats.network+tr.stats.station+tr.stats.location not in c:
            sts.remove(tr)
    for tr in st:
        if tr.stats.network+tr.stats.station+tr.stats.location not in c:
            st.remove(tr)
    return st,sts

def brute_remove(st,sts):
    sts = remove_redundant(sts)
    st = remove_redundant(st)

    a = []
    for tr in st:
        name = tr.stats.network+tr.stats.station+tr.stats.location
        for jr in sts:
            sname = tr.stats.network+tr.stats.station+tr.stats.location
            if sname == name:
                if name in a:
                    continue
                else:
                    a.append(name)
                    continue
            else:
                continue

    for tr in sts:
        name = tr.stats.network+tr.stats.station+tr.stats.location
        if name not in a:
            sts.remove(tr)
    for tr in st:
        name = tr.stats.network+tr.stats.station+tr.stats.location
        if name not in a:
            st.remove(tr)
    return st,sts

def remove_redundant(st):
    a = []
    for tr in st:
        name = tr.stats.network+tr.stats.station+tr.stats.location
        if name not in a:
            a.append(name)
        else:
            st.remove(tr)
    return st

main()

