#!/home/samhaug/anaconda2/bin/python

'''
==============================================================================

File Name : simple secton
Purpose : quickly make a record section
Creation Date : 14-08-2017
Last Modified : Mon 14 Aug 2017 01:57:02 PM EDT
Created By : Samuel M. Haugland

==============================================================================
'''

import numpy as np
from matplotlib import pyplot as plt
from subprocess import call
import os
import obspy
from obspy.taup import TauPyModel
import argparse

#model=TauPyModel(model='iasp91')

def main():
    parser = argparse.ArgumentParser(
                       description='Measure and record traveltime delays')
    parser.add_argument('-st','--stream',metavar='N',type=str,
                        help='Path to streams')
    parser.add_argument('-p','--phase',metavar='N',type=str,
                        help='Name of phase',default=False)
    parser.add_argument('--fmin',default=1./100,type=float,
                        help='Minimum frequency')
    parser.add_argument('--fmax',default=1./1,type=float,
                        help='Maximum frequency')
    parser.add_argument('--stride',default=5,type=int,
                        help='Stride of data')
    args = parser.parse_args()

    st = obspy.read(args.stream)
    st.interpolate(3)
    st.filter('bandpass',freqmin=args.fmin,freqmax=args.fmax,zerophase=True)
    for tr in st:
        tr.stats.sac['o'] = 0
    if args.phase == False:
        simple_section(st[::args.stride])
    #else:
    #    simple_section(st[::args.stride],a_list=[args.phase])

def simple_section(st,**kwargs):
    '''
    Simpler section plotter for obspy stream object
    '''
    a_list = kwargs.get('a_list',True)
    fig = kwargs.get('fig',None)
    ax = kwargs.get('ax',None)
    color = kwargs.get('color','k')
    save = kwargs.get('save',False)
    picker = kwargs.get('picker',False)
    rainbow = kwargs.get('rainbow',False)
    mode = kwargs.get('mode','gcarc')
    xlim = kwargs.get('x_lim',None)
    ylim = kwargs.get('y_lim',None)
    title = kwargs.get('title','')
    #model = kwargs.get('model','prem')
    model = TauPyModel(model='iasp91')

    if fig == None and ax == None:
        fig,ax = plt.subplots(figsize=(9,12))
        plt.tight_layout()
    else:
        print('using outside figure')
    ax.set_xlabel('Time (s)')
    ax.set_ylabel(mode)
    ax.set_title(title)

    def plot(tr,o,ax,color,**kwargs):
        alpha = kwargs.get('alpha',0.5)
        e = tr.stats.npts/tr.stats.sampling_rate
        t = np.linspace(o,o+e,num=tr.stats.npts)[::4]
        ax.plot(t,(tr.data[::4]/np.max(tr.data))+tr.stats.sac[mode],alpha=alpha,
                color=color,label=tr.stats.network+'.'+tr.stats.station,
                picker=10)

    def randcolor():
        c_list = ['#1f77b4','#ff7f0e','#2ca02c',
                   '#d62728','#9467bd','#8c564b',
                   '#e377c2','#7f7f7f','#bcbd22','#17becf']
        return c_list[np.random.randint(len(c_list))]

    if a_list == True:
        for tr in st:
            if rainbow == True:
                plot(tr,0,ax,randcolor(),alpha=0.7)
            else:
                plot(tr,0,ax,color)

    elif type(a_list) == list:
        if len(a_list) != 1:
            print('Must have phase identifier string of len = 1')
            return
        else:
            for tr in st:
                evdp = tr.stats.sac['evdp']
                gcarc = tr.stats.sac['gcarc']
                P = model.get_travel_times(distance_in_degree=gcarc,
                    source_depth_in_km=evdp,
                    phase_list = a_list)
                P_time = P[0].time
                if rainbow == True:
                    plot(tr,-1*(P_time+tr.stats.sac['o']),ax,randcolor())
                else:
                    plot(tr,-1*(P_time+tr.stats.sac['o']),ax,color)

    if picker == True:
        remove_list = []
        def on_pick(event):
            artist = event.artist
            artist.set_c('white')
            artist.set_alpha(0.0)
            remove_list.append(artist.get_label())
            fig.canvas.draw()
        fig.canvas.mpl_connect('pick_event', on_pick)
        ax.set_xlim(xlim)
        ax.set_ylim(ylim)
        plt.show()
        for tr in st:
            if tr.stats.network+'.'+tr.stats.station in remove_list:
                st.remove(tr)

    ax.set_xlim(xlim)
    ax.set_ylim(ylim)

    plt.show()

main()

